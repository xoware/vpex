#!/bin/bash

WORKDIR="`cd \`dirname $0\` && pwd`"
CACHEDIR="$WORKDIR/DownloadCache"
TMPDIR=/tmp/openvpn.$$

# set up error "handling"
# (not really handling anything, just bombing if any command fails)
set -e
set -o pipefail

# functions
debug_point()
{
  echo ""
  echo "### DEBUG POINT: $*"
  echo ""
  bash
}

fetch()
{
  SOURCE="$1"
  FILENAME="$2"
  MD5SUM="$3"
  
  if [ ! -d "$CACHEDIR" ]; then
	mkdir -p "$CACHEDIR"
  fi

  if [ -f "$CACHEDIR/$FILENAME" ]; then
	echo "Using cached copy of $FILENAME."
	cp "$CACHEDIR/$FILENAME" "$TMPDIR"
  else
	echo "Fetching $FILENAME..."
	curl -L -o "$CACHEDIR/$FILENAME" "$SOURCE"
	cp "$CACHEDIR/$FILENAME" "$TMPDIR"
  fi

  # verify md5sum
  if [ -z "$MD5SUM" ]; then
	echo "Warning: no checksum was provided, so can't verify this download"
  else
  	CHECKSUM="`md5 < $CACHEDIR/$FILENAME`"
  	if [ "$CHECKSUM" = "$MD5SUM" ]; then
		echo "File passes MD5 checksum test."
  	else
		echo "ERROR: file does NOT pass MD5 checksum and is probably corrupt!"
		echo "       Look for an alternate download source."
		echo "       The suspect download source was: $SOURCE"
		echo "       Expected checksum: $MD5SUM"
		echo "       Actual checksum:   $CHECKSUM"
		rm -f "$TMPDIR/$FILENAME" "$CACHEDIR/$FILENAME"
		exit 1
  	fi
  fi
}

exit_if_missing()
{
  hash $1 2>&- || { echo >&2 "I require $1 but it's not installed.  Aborting."; exit 1; }
  echo "Good, you have $1."
}

# constants, please do not modify

LZO_VERSION="2.06"
LZO_SRC_URL="http://www.oberhumer.com/opensource/lzo/download/lzo-${LZO_VERSION}.tar.gz"
LZO_SRC_FILE="lzo-${LZO_VERSION}.tar.gz"
LZO_SRC_MD5SUM="95380bd4081f85ef08c5209f4107e9f8"
#OPENSSL_VERSION="1.0.0g"
#OPENSSL_SRC_URL="http://www.openssl.org/source/openssl-${OPENSSL_VERSION}.tar.gz"
#OPENSSL_SRC_FILE="openssl-${OPENSSL_VERSION}.tar.gz"
PKCSHELPER_VERSION="1.09"
PKCSHELPER_SRC_URL="http://www.opensc-project.org/files/pkcs11-helper/pkcs11-helper-${PKCSHELPER_VERSION}.tar.bz2"
PKCSHELPER_SRC_FILE="pkcs11-helper-${PKCSHELPER_VERSION}.tar.bz2"
PKCSHELPER_SRC_MD5SUM="88ca59143f1b1d36283cab406f33a3fa"
OPENVPN_VERSION="2.2.2"
OPENVPN_SRC_URL="http://swupdate.openvpn.org/community/releases/openvpn-${OPENVPN_VERSION}.tar.gz"
OPENVPN_SRC_FILE="openvpn-${OPENVPN_VERSION}.tar.gz"
OPENVPN_SRC_MD5SUM="c5181e27b7945fa6276d21873329c5c7"
WXWIDGETS_VERSION="2.8.12"
WXWIDGETS_SRC_URL="http://biolpc22.york.ac.uk/pub/2.8.12/wxMac-${WXWIDGETS_VERSION}.tar.gz"
WXWIDGETS_SRC_FILE="wxMac-${WXWIDGETS_VERSION}.tar.gz"
WXWIDGETS_SRC_MD5SUM="462d3c646a7bb021dc868cbd7e214eea"
TUNTAP_VERSION="20111101"
TUNTAP_SRC_URL="http://sourceforge.net/projects/tuntaposx/files/tuntap/${TUNTAP_VERSION}/tuntap_${TUNTAP_VERSION}_src.tar.gz/download"
TUNTAP_SRC_FILE="tuntap_${TUNTAP_VERSION}_src.tar.gz"
TUNTAP_SRC_MD5SUM="852593304085e7e36743ac11a9de82fc"

#if [ -z "$1" ]; then
#	echo "Usage: build [install prefix]"
#	exit 1
#fi

if [ -f "$HOME/.developer_identity" ]; then
	source $HOME/.developer_identity
fi

# set up
if [ -z "$DEVELOPER_APP_IDENTITY" ]; then
	echo "ERROR: set \$DEVELOPER_APP_IDENTITY variable to your developer ID"
	echo "       for code signing apps.  (Hint: as a convenience, you can set up"
	echo "       this value in the .developer_identity file in your HOME."
	exit 1
elif ! security find-certificate -c "$DEVELOPER_APP_IDENTITY" >/dev/null 2>&1; then
	echo "ERROR: developer app id \`$DEVELOPER_APP_IDENTITY' does not exist!"
	exit 1
else
	echo "Using the following developer identity for app signing:"
	echo "     $DEVELOPER_APP_IDENTITY"
	echo ""
fi

if [ -z "$DEVELOPER_INSTALLER_IDENTITY" ]; then
	echo "ERROR: set \$DEVELOPER_INSTALLER_IDENTITY variable to your developer ID"
	echo "       for code signing installer packages.  (Hint: as a convenience, you can"
	echo "       set up this value in the .developer_identity file in your HOME."
	exit 1
elif ! security find-certificate -c "$DEVELOPER_INSTALLER_IDENTITY" >/dev/null 2>&1; then
	echo "ERROR: developer installer id \`$DEVELOPER_INSTALLER_IDENTITY' does not exist!"
	exit 1
else
	echo "Using the following developer identity for installer signing:"
	echo "     $DEVELOPER_INSTALLER_IDENTITY"
	echo ""
fi

echo "Testing OS..."
if [ `uname -s` != "Darwin" ]; then
	echo "Error: this build script only runs under Mac OS X."
	exit 1
else
	echo "Good, you are running Mac OS X."
fi

echo "Testing for necessary build programs..."
exit_if_missing curl
#exit_if_missing 7z
#exit_if_missing unzip

# different gcc's for different os's
OS_VERSION=`sw_vers | grep ProductVersion | cut -f2`

case "$OS_VERSION" in
	10.6* ) echo "Detected OS X 10.6 Snow Leopard"
                COMPILER="i686-apple-darwin10-gcc-4.2.1"
		;;
	10.7* ) echo "Detected OS X 10.7 Lion"
		COMPILER="i686-apple-darwin11-llvm-gcc-4.2"
		;;
	* )	echo "Could not determine OS version; assuming Lion"
		COMPILER="i686-apple-darwin11-llvm-gcc-4.2"
		;;
esac

echo ""
echo "I am about to check to see if the command line C/C++ compiler"
echo "($COMPILER) is installed.  If this test fails, then"
echo "either your Developer Tools are improperly installed, or you are using"
echo "Xcode version 4.3+.  If this is the case, then note that the command line"
echo "tools are now an optional install in Xcode 4.3+.  Go to Xcode Preferences,"
echo "click the Downloads tab, click the Components tab, and install the"
echo "Command Line Tools found therein."
echo ""
exit_if_missing $COMPILER
#exit_if_missing autoreconf

echo ""
echo "Checking for PackageMaker..."

if hash packagemaker 2>&-; then
	echo "Good, you have it."
	PACKAGEMAKER="packagemaker"
else
	echo "I can't find it.  Testing for it in alternate locations..."
	echo "Checking in the alternate location..."
	if [ -x /Developer/usr/bin/packagemaker ]; then
		echo "Found it in /Developer/usr/bin."
		PACKAGEMAKER="/Developer/usr/bin/packagemaker"
	elif [ -x /Developer/Applications/PackageMaker.app/Contents/MacOS/PackageMaker ]; then
		echo "Good, you've got it."
		PACKAGEMAKER="/Developer/Applications/PackageMaker.app/Contents/MacOS/PackageMaker"
	else
		echo "Uh-oh.  Can't find it.  PackageMaker is now an optional install in Xcode 4.3+."
		echo "Go to https://developer.apple.com/downloads/ and download the latest version of"
		echo "the 'Auxiliary Tools for Xcode' (as of this writing, it's February 2012 and can"
		echo "be found on page 4 of the downloads list).  Open the resulting DMG, and copy"
		echo "all the files contained within to /Developer/Applications (create this"
		echo "directory if it doesn't already exist)."
		echo ""
		exit 1
	fi
fi

echo "Checking for 10.6 SDK..."
if [ -e "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk" ]; then
	echo "Found at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk"
	SDK_LOCATION="/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk"
elif [ -e "/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk" ]; then
	echo "Found at /Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk"
	SDK_LOCATION="/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.6.sdk"
elif [ -e "/Developer/SDKs/MacOSX10.6.sdk" ]; then
	echo "Found at /Developer/SDKs/MacOSX10.6.sdk"
	SDK_LOCATION="/Developer/SDKs/MacOSX10.6.sdk"
else
	echo "Error: I can't find the 10.6 SDK.  Either install it, or (if running"
	echo "Mountain Lion) download and install XCode 4.1."
	exit 1
fi

BUILDDIR="${WORKDIR}/macbuild.dir"
if [ -d $BUILDDIR ]; then
	echo "Removing previous build directory."
	rm -rf $BUILDDIR
fi
mkdir -p "$BUILDDIR/out"
mkdir -p "$BUILDDIR/out/InstallerPackage/Package_Root/Applications"
mkdir -p "$BUILDDIR/out/InstallerPackage/Package_Root/Library/Extensions"
mkdir -p "$BUILDDIR/out/InstallerPackage/Package_Root/Library/StartupItems"
mkdir -p "$BUILDDIR/out/InstallerPackage/Resources"
mkdir -p "$BUILDDIR/out/InstallerPackage/Scripts"

if ! mkdir -p "$TMPDIR" 2>/dev/null; then
	echo "Error: could not allocate the necessary temp space.  Please clear /tmp."
	exit 1
fi

cd $TMPDIR

if [ "$1" = "-debug" ]; then
	echo ""
	echo "*** PRODUCING DEBUG BUILD ***"
	echo ""
	DEBUG_BUILD=YES
	DEBUG_FLAG="-D__WXDEBUG__"
else
	DEBUG_BUILD=NO
	DEBUG_FLAG=""
fi

# glean version #
VERSION="`grep ^VERSION $WORKDIR/../VERSION | cut -d: -f2`"
BUILD="`grep ^BUILD $WORKDIR/../VERSION | cut -d: -f2`"

# generate version.h
cat << _EOF_ > $WORKDIR/VPExConnectionManager/version.h
#define VERSION_STRING "Version $VERSION Build $BUILD"
#define VERSION $VERSION
#define BUILD $BUILD
_EOF_

# generate Mac specific plist files
for FILE in Info.plist version.plist; do
sed \
	-e "s/_VERSION_/$VERSION/g" \
	-e "s/_BUILD_/$BUILD/g" \
	< $WORKDIR/VPExConnectionManager/$FILE.template \
	> $WORKDIR/VPExConnectionManager/$FILE
done

echo ""
echo "### Beginning build of VPEx Connection Manager version $VERSION build $BUILD..."
echo ""

echo ""
echo "### Downloading all necessary files"
echo ""

fetch "$LZO_SRC_URL" "$LZO_SRC_FILE" "$LZO_SRC_MD5SUM"
fetch "$PKCSHELPER_SRC_URL" "$PKCSHELPER_SRC_FILE" "$PKCSHELPER_SRC_MD5SUM"
fetch "$OPENVPN_SRC_URL" "$OPENVPN_SRC_FILE" "$OPENVPN_SRC_MD5SUM"
fetch "$WXWIDGETS_SRC_URL" "$WXWIDGETS_SRC_FILE" "$WXWIDGETS_SRC_MD5SUM"
fetch "$TUNTAP_SRC_URL" "$TUNTAP_SRC_FILE" "$TUNTAP_SRC_MD5SUM"
 
echo ""
echo "### Extracting..."
echo ""

echo "Extracting $LZO_SRC_FILE..."
cd $BUILDDIR && tar xvzf $TMPDIR/$LZO_SRC_FILE

#echo ""
#echo "Extracting $OPENSSL_SRC_FILE..."
#cd $BUILDDIR && tar xvzf $TMPDIR/$OPENSSL_SRC_FILE

echo ""
echo "Extracting $PKCSHELPER_SRC_FILE..."
cd $BUILDDIR && tar xvjf $TMPDIR/$PKCSHELPER_SRC_FILE

echo ""
echo "Extracting $OPENVPN_SRC_FILE..."
cd $BUILDDIR && tar xvzf $TMPDIR/$OPENVPN_SRC_FILE

echo ""
echo "Extracting $WXWIDGETS_SRC_FILE..."
cd $BUILDDIR && tar xvzf $TMPDIR/$WXWIDGETS_SRC_FILE

echo ""
echo "Extracting $TUNTAP_SRC_FILE..."
cd $BUILDDIR && tar xvzf $TMPDIR/$TUNTAP_SRC_FILE

echo ""
echo "Copying in other misc. files..."
cd $WORKDIR/VPExConnectionManager && make -f Makefile.mac clean
cp -RL $WORKDIR/VPExConnectionManager $BUILDDIR/VPExConnectionManager
cp $WORKDIR/installer/License.rtf $BUILDDIR/out/InstallerPackage/Resources
cp $WORKDIR/installer/postflight $BUILDDIR/out/InstallerPackage/Scripts
cp $WORKDIR/installer/macbuild $BUILDDIR/out/build
chmod 755 $BUILDDIR/out/InstallerPackage/Scripts/postflight
chmod 755 $BUILDDIR/out/build

# set up for build
export LDFLAGS="-Wl,-search_paths_first"

echo ""
echo "### Building wxwidgets"
echo ""

echo "Configuring..."

if [ "$DEBUG_BUILD" = "YES" ]; then
	DEBUG_ARGS="--enable-debug"
else
	DEBUG_ARGS="--disable-debug"
fi
cd $BUILDDIR/wxMac-${WXWIDGETS_VERSION}
mkdir build-carbon-debug
cd build-carbon-debug
arch_flags="-arch i386"
../configure CFLAGS="$arch_flags" CXXFLAGS="$arch_flags" CPPFLAGS="$arch_flags" LDFLAGS="$arch_flags" OBJCFLAGS="$arch_flags" OBJCXXFLAGS="$arch_flags" --prefix=$BUILDDIR/wxwidgets --with-macosx-sdk="$SDK_LOCATION" --with-macosx-version-min=10.6 $DEBUG_ARGS --enable-unicode --disable-shared

echo ""
echo "Building..."
make

echo ""
echo "Installing..."
make install

echo ""
echo "### Building tuntap"
echo ""

cd $BUILDDIR/tuntap && make

echo ""
echo "### Installing tuntap"
echo ""

cd $BUILDDIR/tuntap && cp -a tap.kext tun.kext $BUILDDIR/out/InstallerPackage/Package_Root/Library/Extensions
for SITEM in tap tun; do
	cd $BUILDDIR/tuntap/startup_item && cp -a $SITEM $BUILDDIR/out/InstallerPackage/Package_Root/Library/StartupItems
done

echo ""
echo "### Building LZO..."
echo ""

cd $BUILDDIR/lzo-$LZO_VERSION && ./configure --prefix=$BUILDDIR/lzo && make && make install

#echo ""
#echo "### Building OpenSSL..."
#echo ""

#cd $BUILDDIR/openssl-$OPENSSL_VERSION && ./configure --prefix=$BUILDDIR/openssl darwin-i386-cc && make && make install

echo ""
echo "### Building PKCS-Helper..."
echo ""

cd $BUILDDIR/pkcs11-helper-$PKCSHELPER_VERSION && ./configure --prefix=$BUILDDIR/pkcshelper && make && make install
# remove dylibs so that we force a static link
rm -f $BUILDDIR/pkcshelper/lib/*.dylib

echo ""
echo "### Building openvpn..."
echo ""

cp $WORKDIR/openvpn-mac/socket.c $BUILDDIR/openvpn-$OPENVPN_VERSION/socket.c
#cd $BUILDDIR/openvpn-$OPENVPN_VERSION && ./configure --prefix=$BUILDDIR/openvpn --with-lzo-headers=$BUILDDIR/lzo/include --with-lzo-lib=$BUILDDIR/lzo/lib --with-ssl-headers=$BUILDDIR/openssl/include --with-ssl-lib=$BUILDDIR/openssl/lib --with-pkcs11-helper-headers=$BUILDDIR/pkcshelper/include --with-pkcs11-helper-lib=$BUILDDIR/pkcshelper/lib && make && make install
cd $BUILDDIR/openvpn-$OPENVPN_VERSION && ./configure --prefix=$BUILDDIR/openvpn --enable-password-save --with-lzo-headers=$BUILDDIR/lzo/include --with-lzo-lib=$BUILDDIR/lzo/lib --with-pkcs11-helper-headers=$BUILDDIR/pkcshelper/include --with-pkcs11-helper-lib=$BUILDDIR/pkcshelper/lib && make && make install
cp $BUILDDIR/openvpn/sbin/openvpn $BUILDDIR/VPExConnectionManager

echo ""
echo "### Building VPEx Connection Manager app..."
echo ""
cd $BUILDDIR/VPExConnectionManager && make -f Makefile.mac DEBUG=$DEBUG_BUILD DEBUG_FLAG=$DEBUG_FLAG PREFIX=$BUILDDIR/out BUILDDIR=$BUILDDIR DEVELOPER_APP_IDENTITY="$DEVELOPER_APP_IDENTITY" all install

echo ""
echo "### Creating installer package..."
echo ""
cd $BUILDDIR/out && $PACKAGEMAKER --root InstallerPackage/Package_Root --id com.xoware.VPExConnectionManager --out VPExConnectionManager-temp.pkg --resources InstallerPackage/Resources --scripts InstallerPackage/Scripts --title "VPEx Connection Manager" --no-relocate --target 10.5
rm -rf $BUILDDIR/out/InstallerPackage

#--target, -g 10.5 | 10.4 | 10.3

echo ""
echo "### Checking if License.rtf fix needs to be implemented..."
echo ""

cd $BUILDDIR/out && rm -rf VPExConnectionManager.pkg && pkgutil --expand VPExConnectionManager-temp.pkg VPExConnectionManager.pkg
cd VPExConnectionManager.pkg
if ! grep "<license" Distribution; then
	echo "it does... fixing now..."
	sed -i.bak -e '/<title>/ a\
\ \ \ \ <license file="License.rtf"/>' Distribution && rm -f Distribution.bak
	cd ..
	rm -f VPExConnectionManager-temp.pkg
	pkgutil --flatten VPExConnectionManager.pkg VPExConnectionManager-temp.pkg
	rm -rf VPExConnectionManager.pkg
else
	echo "nope, looks good"
fi

echo ""
echo "### Signing installer package..."
echo ""

cd $BUILDDIR/out && productsign --sign "$DEVELOPER_INSTALLER_IDENTITY" VPExConnectionManager-temp.pkg VPExConnectionManager.pkg && rm -f VPExConnectionManager-temp.pkg

echo ""
echo "### Verifying that installer package was properly signed..."
echo ""

echo "(first with packagemaker)"
cd $BUILDDIR/out && pkgutil --check-signature VPExConnectionManager.pkg
echo ""
echo "(now with spctl)"
cd $BUILDDIR/out && spctl -a -v --type install VPExConnectionManager.pkg || { echo "To verify the package signature, run:"; echo "     spctl -a -v --type install VPExConnectionManager.pkg"; }

echo ""
echo "### All done."
echo ""
echo "You can find the goodies in the directory:"
echo "     $BUILDDIR/out"

echo ""
echo "### Cleaning up after myself..."
echo ""

rm -rf $TMPDIR
