#!/bin/bash
# thanks to: http://qbeukes.blogspot.com/2010/08/building-cross-compiler-on-linux-for.html

WORKDIR="`cd \`dirname $0\` && pwd`"
CACHEDIR="$WORKDIR/DownloadCache"
TMPDIR=/tmp/openvpn.$$

# set up error "handling"
# (not really handling anything, just bombing if any command fails)
set -e 
set -o pipefail

# functions
debug_point()
{
  echo ""
  echo "### DEBUG POINT: $*"
  echo ""
  bash
}

fetch()
{
  SOURCE="$1"
  FILENAME="$2"
  MD5SUM="$3"
  
  if [ ! -d "$CACHEDIR" ]; then
	mkdir -p "$CACHEDIR"
  fi

  if [ -f "$CACHEDIR/$FILENAME" ]; then
	echo "Using cached copy of $FILENAME."
	cp "$CACHEDIR/$FILENAME" "$TMPDIR"
  else
	echo "Fetching $FILENAME..."
	curl -L -o "$CACHEDIR/$FILENAME" "$SOURCE"
	cp "$CACHEDIR/$FILENAME" "$TMPDIR"
  fi

  # verify md5sum
  if [ -z "$MD5SUM" ]; then
	echo "Warning: no checksum was provided, so can't verify this download"
  else
  	CHECKSUM="`md5sum $CACHEDIR/$FILENAME | cut -d' ' -f1`"
  	if [ "$CHECKSUM" = "$MD5SUM" ]; then
		echo "File passes MD5 checksum test."
  	else
		echo "ERROR: file does NOT pass MD5 checksum and is probably corrupt!"
		echo "       Look for an alternate download source."
		echo "       The suspect download source was: $SOURCE"
		echo "       Expected checksum: $MD5SUM"
		echo "       Actual checksum:   $CHECKSUM"
		rm -f "$TMPDIR/$FILENAME" "$CACHEDIR/$FILENAME"
		exit 1
  	fi
  fi
}

exit_if_missing()
{
  hash $1 2>&- || { echo >&2 "I require $1 but it's not installed.  Aborting."; exit 1; }
  echo "Good, you have $1."
}

# constants, please do not modify
OPENVPN_VERSION="2.2.2"
OPENVPN_SRC_URL="http://swupdate.openvpn.org/community/releases/openvpn-${OPENVPN_VERSION}-install.exe"
OPENVPN_SRC_FILE="openvpn-${OPENVPN_VERSION}-install.exe"
OPENVPN_SRC_MD5SUM="3a46f52e8e327b4a729bacc0bc0e0e19"
OPENVPNSRC_VERSION="2.1.3"
OPENVPNSRC_SRC_URL="http://openvpn.net/release/openvpn-${OPENVPNSRC_VERSION}.tar.gz"
OPENVPNSRC_SRC_FILE="openvpn-${OPENVPNSRC_VERSION}.tar.gz"
OPENVPNSRC_SRC_MD5SUM="7486d3e270ba4b033e311d3e022a0ad7"
OPENVPNPREBUILT_VERSION="2.1_rc22"
OPENVPNPREBUILT_SRC_URL="http://openvpn.net/prebuilt/${OPENVPNPREBUILT_VERSION}-prebuilt.tbz"
OPENVPNPREBUILT_SRC_FILE="${OPENVPNPREBUILT_VERSION}-prebuilt.tbz"
OPENVPNPREBUILT_SRC_MD5SUM="bd11d597e26bed4b10c6799ddd880a5e"
OPENVPNBUILD_SRC_URL="http://sites.google.com/site/qbeukesblog/build-openvpn.tar.gz"
OPENVPNBUILD_SRC_FILE="build-openvpn.tar.gz"
OPENVPNBUILD_SRC_MD5SUM="e2b50d63495861c51a8e1d731e4da273"
WXWIDGETS_VERSION="2.8.12"
#WXWIDGETS_SRC_URL="http://prdownloads.sourceforge.net/wxwindows/wxMSW-${WXWIDGETS_VERSION}.zip"
WXWIDGETS_SRC_URL="ftp://ftp.wxwidgets.org/pub/2.8.12/wxMSW-${WXWIDGETS_VERSION}.zip"
WXWIDGETS_SRC_FILE="wxMSW-${WXWIDGETS_VERSION}.zip"
WXWIDGETS_SRC_MD5SUM="b6f4be9dd32090c42994765ff0a832cb"

#if [ -z "$1" ]; then
#	echo "Usage: build [install prefix]"
#	exit 1
#fi

echo "Testing OS..."
if [ `uname -s` != "Linux" ]; then
	echo "Error: this build script only runs under Linux."
	exit 1
else
	echo "Good, you are running Linux."
fi

echo "Testing for necessary build programs..."
exit_if_missing curl
exit_if_missing 7z
exit_if_missing unzip
exit_if_missing i586-mingw32msvc-gcc
exit_if_missing autoreconf
exit_if_missing makensis

BUILDDIR="${WORKDIR}/build.dir"
if [ -d $BUILDDIR ]; then
	echo "Removing previous build directory."
	rm -rf $BUILDDIR
fi
mkdir -p "$BUILDDIR"

if ! mkdir -p "$TMPDIR" 2>/dev/null; then
	echo "Error: could not allocate the necessary temp space.  Please clear /tmp."
	exit 1
fi

cd $TMPDIR

if [ "$1" = "-debug" ]; then
	echo ""
	echo "*** PRODUCING DEBUG BUILD ***"
	echo ""
	DEBUG_BUILD=YES
	DEBUG_FLAG="-D__WXDEBUG__"
else
	DEBUG_BUILD=NO
	DEBUG_FLAG=""
fi

# glean version #
VERSION="`grep ^VERSION $WORKDIR/../VERSION | cut -d: -f2`"
BUILD="`grep ^BUILD $WORKDIR/../VERSION | cut -d: -f2`"

cd $TMPDIR

# generate version.h
cat << _EOF_ > $WORKDIR/VPExConnectionManager/version.h
#define VERSION_STRING "Version $VERSION Build $BUILD"
#define VERSION $VERSION
#define BUILD $BUILD
_EOF_

echo ""
echo "### Beginning build of VPEx Connection Manager version $VERSION build $BUILD..."
echo ""

echo ""
echo "### Making a working copy of the MINGW32 build environment..."
echo ""

cp -a /usr/i586-mingw32msvc/ $BUILDDIR/mingw32
cat /usr/share/doc/mingw32-runtime/mingwm10.dll.gz | gunzip > $BUILDDIR/mingw32/lib/mingwm10.dll
for BIN in /usr/bin/i586-mingw32msvc-*
do
	BASEBIN=`basename $BIN`
	rm -f $BUILDDIR/mingw32/bin/$BASEBIN
	ln -sf $BIN $BUILDDIR/mingw32/bin/$BASEBIN
done

echo ""
echo "### Downloading all necessary files"
echo ""

fetch "$OPENVPN_SRC_URL" "$OPENVPN_SRC_FILE" "$OPENVPN_SRC_MD5SUM"
fetch "$OPENVPNSRC_SRC_URL" "$OPENVPNSRC_SRC_FILE" "$OPENVPNSRC_SRC_MD5SUM"
fetch "$OPENVPNPREBUILT_SRC_URL" "$OPENVPNPREBUILT_SRC_FILE" "$OPENVPNPREBUILT_SRC_MD5SUM"
fetch "$OPENVPNBUILD_SRC_URL" "$OPENVPNBUILD_SRC_FILE" "$OPENVPNBUILD_SRC_MD5SUM"
fetch "$WXWIDGETS_SRC_URL" "$WXWIDGETS_SRC_FILE" "$WXWIDGETS_SRC_MD5SUM"
 
echo ""
echo "### Extracting..."
echo ""
 
echo "Extracting $OPENVPN_SRC_FILE..."
cd $BUILDDIR && mkdir tap_driver && cd tap_driver && echo "u" | 7z x $TMPDIR/$OPENVPN_SRC_FILE

echo ""
echo "Extracting $OPENVPNBUILD_SRC_FILE..."
cd $BUILDDIR && tar xvzf $TMPDIR/$OPENVPNBUILD_SRC_FILE
# copy in build requirements
cp $TMPDIR/$OPENVPNSRC_SRC_FILE $BUILDDIR/openvpn-src/archive
cp $TMPDIR/$OPENVPNPREBUILT_SRC_FILE $BUILDDIR/openvpn-src/archive

echo ""
echo "Extracting $OPENVPNPREBUILT_SRC_FILE..."
cd $BUILDDIR && tar xvjf $TMPDIR/$OPENVPNPREBUILT_SRC_FILE

echo ""
echo "Extracting $WXWIDGETS_SRC_FILE..."
cd $BUILDDIR && unzip -a $TMPDIR/$WXWIDGETS_SRC_FILE

echo ""
echo "Copying in other misc. files..."
mkdir -p $BUILDDIR/out/installer.tmp
for DIR in bin easy-rsa images lib nsi samples text; do
	mkdir -p $BUILDDIR/out/installer.tmp/$DIR
done
cp -RL $WORKDIR/VPExConnectionManager $BUILDDIR/VPExConnectionManager
cp $WORKDIR/installer/build $BUILDDIR/out
for FILE in gpl.txt vpex.ico vpex.nsi FileAssociation.nsh fileassoc.nsh; do
	cp $WORKDIR/installer/$FILE $BUILDDIR/out/installer.tmp
done
chmod 755 $BUILDDIR/out/build

echo ""
echo "### Building wxwidgets"
echo ""

echo "Configuring..."
if [ "$DEBUG_BUILD" = "YES" ]; then
	DEBUG_ARGS="--enable-debug"
else
	DEBUG_ARGS="--disable-debug"
fi
cd $BUILDDIR/wxMSW-${WXWIDGETS_VERSION} && ./configure --prefix=$BUILDDIR/mingw32 --host=i586-mingw32msvc --build=i686-linux $DEBUG_ARGS

echo ""
echo "Building..."
make

echo ""
echo "Installing..."
make install

echo ""
echo "### Building VPEx Connection Manager app..."
echo ""
cd $BUILDDIR/VPExConnectionManager && make clean && make DEBUG=$DEBUG_BUILD DEBUG_FLAG=$DEBUG_FLAG PREFIX=$BUILDDIR/out/installer.tmp BUILDDIR=$BUILDDIR all install

echo ""
echo "### Building openvpn..."
echo ""

cd $BUILDDIR/openvpn-src
sed \
        -e "s#^PREFIX=.*#PREFIX=$BUILDDIR/out/installer.tmp/openvpn#" \
        -e "s#^TARGET=.*#TARGET=i586-mingw32msvc#" \
        -e "s#^TOOLCHAIN=.*#TOOLCHAIN=$BUILDDIR/mingw32#" \
        -e "s#^MAKENSIS=.*##" \
        -i.bak env.sh
cp $WORKDIR/openvpn/build-openvpn.sh $BUILDDIR/openvpn-src

# COPY IN DLLS AND CRAP
PBDIR="$BUILDDIR/${OPENVPNPREBUILT_VERSION}-prebuilt"
export MINGDIR="$BUILDDIR/mingw32"
# lzo
cp -a $PBDIR/lzo-2.02/include/lzo $MINGDIR/include/lzo
cp $PBDIR/lzo-2.02/*.a $MINGDIR/lib
# openssl
cp -a $PBDIR/openssl-0.9.8l/include/openssl $MINGDIR/include/openssl
cp -a $PBDIR/openssl-0.9.8l/out/*.a $MINGDIR/lib
cp -a $PBDIR/openssl-0.9.8l/*.dll $MINGDIR/lib
# pkcs11-helper
cp -a $PBDIR/pkcs11-helper/usr/local/bin/*.dll $MINGDIR/lib
cp -a $PBDIR/pkcs11-helper/usr/local/include/pkcs11-helper-1.0 $MINGDIR/include/pkcs11-helper-1.0
cp -a $PBDIR/pkcs11-helper/usr/local/lib/*.a $MINGDIR/lib

# build it
#
#export LZO_DIR=$BUILDDIR/openvpn-src/src/lzo-2.02
#export OPENSSL_DIR=$BUILDDIR/openvpn-src/src/openssl-0.9.8l
#export PKCS11_HELPER_DIR=$BUILDDIR/openvpn-src/src/ directories were missing^M
#export GENOUT=$BUILDDIR/openvpn-build

bash build-openvpn.sh

# for some reason openvpn.exe isn't copied over
cp $BUILDDIR/openvpn-src/src/openvpn-2.1.3/windest/sbin/*.exe $BUILDDIR/out/installer.tmp/openvpn/bin
# shared libs too
for LIB in libeay32.dll libpkcs11-helper-1.dll libssl32.dll; do
	cp $BUILDDIR/mingw32/lib/$LIB $BUILDDIR/out/installer.tmp
done

echo ""
echo "### Extracting prebuilt TAP driver"
echo ""

mkdir -p "${BUILDDIR}/out/installer.tmp/driver32"
mkdir -p "${BUILDDIR}/out/installer.tmp/driver64"

cd $BUILDDIR/tap_driver

# really nasty hack, because for some reason the 32- and 64-bit versions
# of the driver want to extract to the same place
#
# determine which is the win32 version
if file bin/tapinstall.exe | grep -q "Intel 80386" 2>/dev/null; then
	echo "tapinstall.exe is the 32 bit version."
	cp -a bin/tapinstall.exe $BUILDDIR/out/installer.tmp/driver32/tapinstall.exe
	cp -a bin/tapinstall_1.exe $BUILDDIR/out/installer.tmp/driver64/tapinstall.exe
	for FILE in OemWin2k_1.inf tap0901_1.sys tap0901_1.cat
	do
		PLAIN=`echo $FILE | sed -e 's/_1//g'`
		cp -a driver/$FILE $BUILDDIR/out/installer.tmp/driver64/$PLAIN
		cp -a driver/$PLAIN $BUILDDIR/out/installer.tmp/driver32/$PLAIN
	done
else
	echo "tapinstall_1.exe is the 32 bit version."
	cp -a bin/tapinstall_1.exe $BUILDDIR/out/installer.tmp/driver32/tapinstall.exe
	cp -a bin/tapinstall.exe $BUILDDIR/out/installer.tmp/driver64/tapinstall.exe
	for FILE in OemWin2k_1.inf tap0901_1.sys tap0901_1.cat
	do
		PLAIN=`echo $FILE | sed -e 's/_1//g'`
		cp -a driver/$FILE $BUILDDIR/out/installer.tmp/driver32/$PLAIN
		cp -a driver/$PLAIN $BUILDDIR/out/installer.tmp/driver64/$PLAIN
	done
fi

echo ""
echo "Removing unnecessary directories..."
echo ""

for JUNKDIR in images nsi samples test text easy-rsa lib
do
	rm -rf $BUILDDIR/out/installer.tmp/openvpn/$JUNKDIR
done

echo ""
echo "### Building installer package..."
echo ""

cd $BUILDDIR/out/installer.tmp && ../nsis-2.46/bin/makensis vpex.nsi && mv VPExConnectionManager.exe .. && cd .. && rm -rf installer.tmp

echo ""
echo "### All done."
echo ""
echo ""
echo "You can find the goodies in the directory:"
echo "     $BUILDDIR/out"

echo ""
echo "### Cleaning up after myself..."
echo ""

rm -rf $TMPDIR
